1.cmd java一个java程序时，必会启动一个jvm即java虚拟机。(5.6.处有联系！！)
2.该java程序的所有线程，变量都处于jvm中，都使用该jvm的内存区
3.jvm终止的情况：
     1.程序自然运行结束
     2.遇到System.exit();Runtime.getRuntime.exit();
     3.遇到未捕获异常或错误时
     4.程序所在的平台强制结束了JVM进程
     jvm终止，jvm内存中的数据全部丢失。

4.类的加载：  
  程序主动使用某个类，类还未被加载到jvm的内存中，那么jvm将会通过加载，连接，初始化对该类进行初始化!
 
  类加载
  （使用类加载器，jvm提供类加载器，即系统类加载器。也可以是自己继承ClassLoader基类来创建的类加载器)
  是指将类的.class文件读入内存，并为之创建一个java.lang.Class对象
  类加载无须等到“首次使用该类”时加载，jvm允许预加载某些类。。。。（预加载的情况有哪些？？）
  来源：
  1.本地.class文件
  2.jar包的.class文件
  3.网络.class文件
  4.把一个java源文件动态编译，加载
  
  类连接
  负责把类的二进制数据合并到JRE（java运行环境）中
  1.验证 检测被加载的类是否有正确的内部结构，并和其他类协调一致
  2.准备 负责为类的类变量（非对象变量）分配内存，并设置默认初始值
  3.解析 将类的二进制数据中的符号引用替换成直接引用。。(static final 好像跟这个有点关系？？？？5.6.处有联系）
  
  类初始化
  主要对类变量（而非对象变量）的初始化
  声明类变量的初始值 = 静态初始化快 他们是相同的，等效的。都会被当成类的初始化语句
  步骤：
  1.假设类还没有被加载和连接，那么先加载和连接该类
  2.假设该类的父类还没被初始化，那么先初始化父类 ----jvm总是最先初始化java.lang.Object类 
  3.假设类充有初始化语句，则一次执行这些初始化语句
  
5.类初始化的时机：
  1.创建类的实例。new,反射，反序列化
  2.使用某类的类方法--静态方法
  3.访问某类的类变量，或赋值类变量
  4.反射创建某类或接口的Class对象。Class.forName("Hello");---loadClass调用ClassLoader.loadClass(name,false)方法,没有link，自然没有initialize
  5.初始化某类的子类
  6.直接使用java.exe来运行某个主类。即cmd java 程序会先初始化该类。
  final 类型的类变量，如果在编译时（转成.class文件）就可以确定，那么这个类变量就相当于“宏变量”，编译时，直接替换成值。
  所以，及时使用这个类变量，程序也不会导致该类的初始化！！----相当于直接使用 常量
  
  使用ClassLoader类的 loadClass方法来加载类时，只是加载该类，而不会执行该类的初始化！！使用Class的forName()静态方法，才会导致强制初始化该类。

6.类加载器：
  类加载器 负责加载所有的类，为被加载如内存中的类生成一个java.lang.Class实例。一旦类被载入内存，同一个类就不会再加载第二次
  
  同一个类：
  java中 一个类用其 全限定类名标示--包名+类名
  jvm中  一个类用其 全限定类名+加载器标示---包名+类名+加载器名
  
  加载器层次结构：
  JVM启动时，姓曾的三个类加载器组成的机构
  1.Bootstrap ClassLoader  根类 ------引导类加载器，加载java核心类。非java.lang.ClassLoader子类，而是JVM自身实现
  2.Extension ClassLoader  扩展类-----加载JRE的扩展目录中的JAR包的类（%JAVA_HOME%/jre/lib/ext或java.ext.dirs系统属性指定的目录）
  3.System ClassLoader     系统类-----加载cmd java -cp **,环境变量指定的jar包和类路径。ClassLoader.getSystemClassLoader获得 系统类加载器。
  
7.类的加载机制：
  1.全盘负责。某类以及其所依赖的所有类，都由一个加载器负责加载。除非显示使用另外一个加载器。
  2.父类委托。先父类加载器加载改Class，不行后，才尝试从自己的类路径中加载该类
  3.缓存机制。先从缓存区中寻找Class对象，没有的话，才加载改类的.class对象。
  
  
  